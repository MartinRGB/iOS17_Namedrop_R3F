(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{6268:function(e,n,t){Promise.resolve().then(t.bind(t,2248))},2248:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return F}});var r=t(9268),a=t(6006),o=t(4883),l=t(5334),i=t(6061),u=t(5920),s=t(5850),f=t(7804),c=t(9153),m=t(9636),v=t(6435);let h="\n    varying vec2 vUv;\n    varying vec3 v_pos;\n\n",x="\n    void main()	{\n        vUv = uv;\n        v_pos = position;\n        gl_Position = vec4(position, 1.);\n    }\n",p="\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n\n    varying vec3 v_pos;\n    varying vec2 vUv;\n",g=(0,i.g)({time:0,buff_tex:null,contact_tex:null,resolution:[600,600],blurOffset:6,pixelOffset:.5,scale_transform:.3,translation_transform:[0,0],strench_y_factor:0},h+x,p+"\n        uniform float time;\n        uniform vec2 resolution;\n        uniform sampler2D buff_tex;\n        uniform sampler2D contact_tex;\n        uniform vec2 translation_transform;\n        uniform float scale_transform;\n        uniform float strench_y_factor;\n\n        // # from the book of shaders\n        mat2 scale(vec2 _scale){\n            return mat2(_scale.x,0.0,\n                        0.0,_scale.y);\n        }\n\n        // # I didn't use this method,it will cause a border in tblr border\n        // # the Three.js's texture wrapping didn't contain 'GL_CLAMP_TO_BORDER'\n        // # discussion see here: https://discourse.threejs.org/t/how-clamp-edge-wrapping-a-texture-image/40938\n\n        vec4 roughClampTexture(in vec2 translate,in float scale,in vec2 uv,in float threshold){\n            if(vUv.x > ((1.-1./scale)/2. + translate.x + threshold) && vUv.x < ((1.-1./scale)/2. + translate.x + 1./scale - threshold) ){\n                if(vUv.y > ((1.-1./scale)/2. + translate.y + threshold) && vUv.y < ((1.-1./scale)/2. + translate.y + 1./scale - threshold) ){\n                    vec4 col = texture(contact_tex,vec2(uv.x,uv.y));\n                    return col;\n                }\n            }\n\n            return vec4(0.);\n        }\n\n        void main() {\n            vec2 uv = vec2(vUv.x,vUv.y/(1.0 + 0.03 * strench_y_factor));\n            vec2 wpUV = uv;\n            vec2 ctUV = uv;\n            float downScale = scale_transform;\n\n            // # 2D translate\n            vec2 translate = translation_transform ;\n            ctUV -= translate;\n\n            // # 2D scale\n            ctUV -= 0.5;\n            ctUV = ctUV*scale(vec2(scale_transform));\n            ctUV += 0.5;\n\n            //vec4 contactCol = roughClampTexture(translate,scale_transform,ctUV,0.003);\n            vec4 contactCol;\n            contactCol = texture(contact_tex,ctUV);\n            \n            vec4 wallpaperCol = texture(buff_tex,vec2(uv.x,uv.y));\n            gl_FragColor = mix(wallpaperCol,contactCol,contactCol.a);\n        }\n    "),d=(0,i.g)({time:0,buff_tex:null,resolution:[600,600],blurOffset:6,pixelOffset:.5},h+x,p+"\n        uniform float time;\n        uniform vec2 resolution;\n        uniform sampler2D buff_tex;\n        uniform float blurOffset;\n        uniform float pixelOffset;\n    \n        #define sampleScale (1. + blurOffset*0.1)\n\n        void main() {\n            vec2 uv = vUv*sampleScale;\n            vec2 halfpixel = pixelOffset / (resolution.xy / sampleScale);\n        \n            vec4 sum;\n            sum = texture(buff_tex, uv) * 4.0;\n            sum += texture(buff_tex, uv - halfpixel.xy * blurOffset);\n            sum += texture(buff_tex, uv + halfpixel.xy * blurOffset);\n            sum += texture(buff_tex, uv + vec2(halfpixel.x, -halfpixel.y) * blurOffset);\n            sum += texture(buff_tex, uv - vec2(halfpixel.x, -halfpixel.y) * blurOffset);\n        \n            gl_FragColor = sum / 8.0;\n        }\n    "),_=(0,i.g)({time:0,buff_tex:null,resolution:[600,600],blurOffset:6,pixelOffset:.5},h+x,p+"\n        uniform float time;\n        uniform vec2 resolution;\n        uniform sampler2D buff_tex;\n        uniform float blurOffset;\n        uniform float pixelOffset;\n\n        #define sampleScale (1. + blurOffset*0.1)\n\n        void main() {\n\n            vec2 uv = vUv/sampleScale;\n            vec2 halfpixel = pixelOffset / (resolution.xy * sampleScale);\n        \n            vec4 sum;\n            \n            sum =  texture(buff_tex, uv +vec2(-halfpixel.x * 2.0, 0.0) * blurOffset);\n            sum += texture(buff_tex, uv + vec2(-halfpixel.x, halfpixel.y) * blurOffset) * 2.0;\n            sum += texture(buff_tex, uv + vec2(0.0, halfpixel.y * 2.0) * blurOffset);\n            sum += texture(buff_tex, uv + vec2(halfpixel.x, halfpixel.y) * blurOffset) * 2.0;\n            sum += texture(buff_tex, uv + vec2(halfpixel.x * 2.0, 0.0) * blurOffset);\n            sum += texture(buff_tex, uv + vec2(halfpixel.x, -halfpixel.y) * blurOffset) * 2.0;\n            sum += texture(buff_tex, uv + vec2(0.0, -halfpixel.y * 2.0) * blurOffset);\n            sum += texture(buff_tex, uv + vec2(-halfpixel.x, -halfpixel.y) * blurOffset) * 2.0;\n        \n            gl_FragColor = sum / 12.0;\n        }\n    "),b=(0,i.g)({time:0,buff_tex:null,resolution:[600,600],wavePara:[10,.8,.1],waveCenter:[.5,.9],textureDistortFac:40,waveFactor:0},h+x,p+"\n    uniform float time;\n    uniform vec2 resolution;\n    uniform sampler2D buff_tex;\n    uniform vec3 wavePara;\n    uniform vec2 waveCenter;\n    uniform float textureDistortFac;\n    #define iTime time\n    #define iChannel0 buff_tex\n    #define iResolution resolution\n    uniform float waveFactor;\n\n    float rand(vec2 co){\n        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    }\n\n    vec4 waveEffect(in vec2 uv){\n        //Sawtooth function to pulse from centre.\n        // float offset = (iTime- floor(iTime))/iTime;\n        // float CurrentTime = (iTime)*(offset);    \n        float fac = waveFactor;\n        float offset = (fac- floor(fac))/fac;\n        float CurrentTime = (fac)*(offset);   \n\n        \n        vec3 WaveParams = vec3(10.0, 0.8, 0.1);// distance,height,time\n        WaveParams = wavePara;\n\n        float ratio = iResolution.y/iResolution.x;\n           \n        vec2 WaveCentre = vec2(0.5, 0.9);\n        WaveCentre = waveCenter;\n        WaveCentre.y *= ratio; \n       \n        vec2 texCoord = gl_FragCoord.xy / iResolution.xy;    \n        texCoord.y *= ratio;    \n        texCoord = uv;  \n        \n        //vec2 waveCoord = texCoord;\n        //waveCoord.y *= ratio;\n        float Dist = distance(vec2(texCoord.x,texCoord.y*2.), WaveCentre);\n\n        vec4 Color = texture(iChannel0, texCoord);\n        \n        float outputCol;\n        //Only distort the pixels within the parameter distance from the centre\n        if ((Dist <= ((CurrentTime) + (WaveParams.z))) && (Dist >= ((CurrentTime) - (WaveParams.z)))) \n        {\n            //The pixel offset distance based on the input parameters\n            float Diff = (Dist - CurrentTime); \n            float ScaleDiff = (1.0 - pow(abs(Diff * WaveParams.x), WaveParams.y)); \n            float DiffTime = (Diff  * ScaleDiff);\n            \n            //The direction of the distortion\n            vec2 DiffTexCoord = normalize(texCoord - WaveCentre);         \n            \n            //Perform the distortion and reduce the effect over time\n            texCoord += ((DiffTexCoord * DiffTime) / (CurrentTime * Dist * textureDistortFac));\n            Color = texture(iChannel0, texCoord);\n            \n            //Blow out the color and reduce the effect over time\n            Color += (Color * ScaleDiff) / (CurrentTime * Dist * textureDistortFac);\n\n            outputCol = ScaleDiff;\n            \n        } \n\n        //return vec4(vec3(outputCol),1.);\n        return Color;\n    }\n\n    void main() {\n\n        gl_FragColor = waveEffect(vUv);\n    }\n"),C=(0,i.g)({resolution:[600,600],time:0,buff_tex:null,base_color:[.2,.3,.8],speed:1,burstRange:250,length:.0035,particle_amount:500,center:[.5,.95],pusleFactor:0},h+x,"\n#define TWO_PI 6.283185\n// https://www.shadertoy.com/view/XlGcRh\n\n// https://www.pcg-random.org/\nuint pcg(uint v)\n{\n	uint state = v * 747796405u + 2891336453u;\n	uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n	return (word >> 22u) ^ word;\n}\n\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\n\nfloat hash11(float p) {\n    return float(pcg(uint(p)))/4294967296.;\n}\n\nvec2 hash21(float p) {\n    return vec2(pcg2d(uvec2(p, 0)))/4294967296.;\n}\n\nvec3 hash33(vec3 p3) {\n    return vec3(pcg3d(uvec3(p3)))/4294967296.;\n}\n"+p+"\n    uniform float time;\n    uniform vec2 resolution;\n    uniform sampler2D buff_tex;\n    #define iTime time\n    #define iChannel0 buff_tex\n    #define iResolution resolution\n\n    uniform vec3 base_color;\n    uniform float speed;\n    uniform float burstRange;\n    uniform float length;\n    uniform float particle_amount;\n    uniform vec2 center;\n    uniform float pusleFactor;\n\n    vec3 particleEffects(in vec2 fragCoord,in vec2 center){\n        center = iResolution.xy*center;\n\n        float c0 = 0., c1 = 0.;\n\n        // pulse effect from https://www.shadertoy.com/view/ldycR3\n        float fac = 1. + pusleFactor;\n        float r = (fac+1.)/2.;\n        float a = pow(r, 2.0);\n        float b = sin(r * 0.8 - 1.6);\n        float c = sin(r - 0.010);\n        float s = sin(a - fac * 3.0 + b) * c;\n    \n        for(float i = 0.; i < particle_amount*s; ++i) {\n            float t = speed*iTime + hash11(i);\n    \n            // # use time generate noise,the parameter is just the seed number\n            vec2 v = hash21(i + 50.*floor(t));\n            // # from 0 to 1 normalize the noised time\n            t = fract(t);\n            \n            //v = vec2(sqrt(-2.*log(1.-v.x)), 6.283185*v.y);       \n            // # polar the coordnates\n            // # distance & emit around the center\n            v = burstRange*v.x*vec2(cos(v.y*10.), sin(v.y*10.));\n    \n            vec2 p = center + t*v - fragCoord;\n            // # the glow center\n            // c0 += 0.1*(1.-t)/(1. + 0.13*dot(p,p));\n    \n            p = p.yx;\n            v = v.yx;\n            p = vec2(\n                p.x/v.x,\n                p.y - p.x/v.x*v.y\n            );\n            \n            float a = abs(p.x) < length ? 50./abs(v.x) : 0.;\n            float b0 = max(2. - abs(p.y), 0.);\n            //float b1 = 0.2/(1.+0.0001*p.y*p.y);\n            c0 += (1.-t)*b0*a;\n            //c1 += (1.-t)*b1*a;\n            \n            // # accumulate particles,\n            c0 += (t)*b0*a;\n        }\n    \n        vec3 rgb = c0*base_color;\n        //rgb += hash33(vec3(fragCoord,iTime*256.))/512.;\n        rgb = pow(rgb, vec3(0.4545));  \n        return rgb;      \n    }\n\n    void main() {\n        vec2 center = vec2(0.5,0.95);\n        vec3 particleColor = particleEffects(vUv*iResolution.xy,center);\n        gl_FragColor = texture(buff_tex,vUv) + vec4(particleColor,1.);\n    }\n"),y=(0,i.g)({resolution:[600,600],time:0,buff_tex:null,light_distance:200,light_expotential_factor:12,light_mix_factor:.5,light_center:[.5,.5],DEPTH:1,depth_offset:[1,1],top_light_strength:1},h+x,p+"\n\n    uniform float time;\n    uniform vec2 resolution;\n    uniform sampler2D buff_tex;\n    uniform float light_distance;\n    uniform float light_expotential_factor;\n    uniform float light_mix_factor;\n    uniform vec2 light_center;\n    uniform float DEPTH;\n    #define iTime time\n    #define iChannel0 buff_tex\n    #define iResolution resolution\n    uniform vec2 depth_offset;\n    uniform float top_light_strength;\n\n    // by Nikos Papadopoulos, 4rknova / 2013\n    // Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n    #define ENABLE_LIGHTING\n    #define ENABLE_SPECULAR\n\n    //#define OFFSET_X 1\n    //#define OFFSET_Y 1\n    #define OFFSET_X int(depth_offset.x)\n    #define OFFSET_Y int(depth_offset.y)\n\n    vec3 texsample(const int x, const int y, in vec2 fragCoord)\n    {\n        vec2 uv = fragCoord.xy ;\n        uv = (uv + vec2(x, y)) / resolution.xy;\n        return texture(iChannel0, uv).xyz;\n    }\n    \n    float luminance(vec3 c)\n    {\n        return dot(c, vec3(.2126, .7152, .0722));\n    }\n\n    vec3 normal(in vec2 fragCoord)\n    {\n        float R = abs(luminance(texsample( OFFSET_X,0, fragCoord)));\n        float L = abs(luminance(texsample(-OFFSET_X,0, fragCoord)));\n        float D = abs(luminance(texsample(0, OFFSET_Y, fragCoord)));\n        float U = abs(luminance(texsample(0,-OFFSET_Y, fragCoord)));\n                    \n        float X = (L-R) * .5;\n        float Y = (U-D) * .5;\n\n        return normalize(vec3(X, Y, 1. / DEPTH));\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vUv * iResolution.xy;\n        vec3 n = normal(fragCoord);\n\n    #ifdef ENABLE_LIGHTING\n\n        //animated_position = vec2(iResolution.x*0.5,iResolution.y*( 0.1 + (cos(iTime) + 1.)/2.)*0.88);\n        \n        // # lp0 is the top light\n        \n        vec3 lp0 = vec3(iResolution.x*0.5,iResolution.y*1., light_distance); //iMouse.xy\n        vec3 lp = vec3(iResolution.x*light_center.x,iResolution.y*light_center.y, light_distance); //iMouse.xy\n        vec3 sp = vec3(fragCoord.xy, 0.);\n        \n        vec3 c = texsample(0, 0, fragCoord) * dot(n, normalize(lp - sp));\n        \n        // # add influence of top light\n        \n        c += texsample(0, 0, fragCoord) * dot(n, normalize(lp0 - sp)) * top_light_strength;\n\n    #ifdef ENABLE_SPECULAR\n\n        // # specular highlights -> https://en.wikibooks.org/wiki/GLSL_Programming/GLUT/Specular_Highlights\n\n        float e = light_expotential_factor;\n        vec3 ep = vec3(fragCoord.xy, 200.);\n        c += pow(clamp(dot(normalize(reflect(lp - sp, n)), normalize(sp - ep)), 0., 1.), e) /2.;\n        c += pow(clamp(dot(normalize(reflect(lp0 - sp, n)), normalize(sp - ep)), 0., 1.), e) * top_light_strength;\n    #endif /* ENABLE_SPECULAR */\n        \n    #else\n        vec3 c = n;\n        \n    #endif /* ENABLE_LIGHTING */\n        \n        gl_FragColor = mix(texture(buff_tex,vUv),vec4(c, 1),light_mix_factor);\n    }\n");(0,o.e)({TextureTransformMaterial:g,BlurDownSampleMaterial:d,BlurUpSampleMaterial:_,WaveMaterial:b,ParticleMaterial:C,ProceduralLightMaterial:y});let w=e=>{let{isTriggered:n}=e,t=(0,o.D)(f.TextureLoader,"./wallpaper.png"),l=(0,o.D)(f.TextureLoader,"./contact.png"),{size:i,gl:c,scene:h,camera:x}=(0,o.z)(),p=(0,a.useRef)(null),g=(0,a.useRef)(null),d=(0,a.useRef)(null),_=(0,a.useRef)(null),b=(0,a.useRef)(null),C=(0,a.useRef)(null),y=(0,a.useRef)(null),w=(0,a.useRef)(null),O={format:f.RGBAFormat,minFilter:f.LinearFilter,magFilter:f.LinearFilter,type:f.FloatType},F=(0,u.R)(i.width,i.height,O),T=(0,u.R)(i.width,i.height,O),R=(0,u.R)(i.width,i.height,O),j=(0,u.R)(i.width,i.height,O),S=(0,u.R)(i.width,i.height,O),D=(0,u.R)(i.width,i.height,O),E=(0,u.R)(i.width,i.height,O),[P,U,L,z,M,N,V]=(0,a.useMemo)(()=>{let e=new f.Scene,n=new f.Scene,t=new f.Scene,r=new f.Scene,a=new f.Scene,o=new f.Scene,l=new f.Scene;return[e,n,t,r,a,o,l]},[]),{scale_transform:k,translation_transform:A,strench_y_factor:G}=(0,m.M4)("Transform",{scale_transform:{lable:"scale",value:.3,min:0,max:10,step:.001,onChange:e=>{p.current&&(p.current.uniforms.scale_transform.value=1/e)}},strench_y_factor:{label:"strench y factor",value:0,min:0,max:10,step:.01,onChange:e=>{p.current&&(p.current.uniforms.strench_y_factor.value=e)}},translation_transform:{lable:"transform",value:{x:0,y:3},min:-10,max:10,step:.001,onChange:e=>{p.current&&(p.current.uniforms.translation_transform.value=e)}}}),{blurOffset:W,pixelOffset:B}=(0,m.M4)("Blur",{blurOffset:{label:"blur offset",value:0,min:0,max:100,step:.01,onChange:e=>{g.current&&(g.current.uniforms.blurOffset.value=e),d.current&&(d.current.uniforms.blurOffset.value=e),_.current&&(_.current.uniforms.blurOffset.value=e),b.current&&(b.current.uniforms.blurOffset.value=e)}},pixelOffset:{label:"pixel offset",value:.5,min:0,max:10,step:.01,onChange:e=>{g.current&&(g.current.uniforms.pixelOffset.value=e),d.current&&(d.current.uniforms.pixelOffset.value=e),_.current&&(_.current.uniforms.pixelOffset.value=e),b.current&&(b.current.uniforms.pixelOffset.value=e)}}}),{wavePara:q,waveCenter:H,textureDistortFactor:I,waveFactor:J}=(0,m.M4)("Wave",{waveFactor:{label:"wave animation factor",value:0,min:0,max:10,step:.01,onChange:e=>{C.current&&(C.current.uniforms.waveFactor.value=e)}},wavePara:{label:"wave parameters",value:{x:10,y:.8,z:.1},step:.01,onChange:e=>{C.current&&C.current.uniforms.wavePara&&D&&(C.current.uniforms.wavePara.value=[e.x,e.y,e.z])}},waveCenter:{label:"wave center",value:{x:.5,y:.9},step:.01,onChange:e=>{C.current&&(C.current.uniforms.waveCenter.value=new f.Vector2(e.x,e.y))}},textureDistortFactor:{label:"distortion factor",value:40,min:1e-5,max:1e3,step:.001,onChange:e=>{C.current&&(C.current.uniforms.textureDistortFac.value=e)}}}),{base_color:X,speed:Y,burstRange:K,length:Q,particle_amount:Z,center:$,pusleFactor:ee}=(0,m.M4)("Particle",{base_color:{label:"base color",value:{r:51,g:76.5,b:204},onChange:e=>{y.current&&(y.current.uniforms.base_color.value=[e.r/255,e.g/255,e.b/255])}},pusleFactor:{label:"pusle animation factor",value:0,min:0,max:10,step:.01,onChange:e=>{y.current&&(y.current.uniforms.pusleFactor.value=e)}},length:{label:"particle size",value:35,min:0,max:1e4,step:.01,onChange:e=>{y.current&&(y.current.uniforms.length.value=e/1e4)}},speed:{label:"particle speed",value:1,min:0,max:100,step:.01,onChange:e=>{y.current&&(y.current.uniforms.speed.value=e)}},burstRange:{label:"burst range",value:250,min:0,max:1e3,step:.01,onChange:e=>{y.current&&(y.current.uniforms.burstRange.value=e)}},particle_amount:{label:"particle number",value:500,min:0,max:5e3,step:1,onChange:e=>{y.current&&(y.current.uniforms.particle_amount.value=e)}},center:{label:"burst center",value:{x:.5,y:.95},min:0,max:1,step:.001,onChange:e=>{y.current&&(y.current.uniforms.center.value=[e.x,e.y])}}}),{light_distance:en,light_expotential_factor:et,light_mix_factor:er,light_center:ea,top_light_strength:eo}=(0,m.M4)("Light",{light_distance:{label:"light distance",value:200,min:0,max:5e3,step:.01,onChange:e=>{w.current&&(w.current.uniforms.light_distance.value=e)}},top_light_strength:{label:"top light strength",value:0,min:0,max:1,step:.01,onChange:e=>{w.current&&(w.current.uniforms.top_light_strength.value=e)}},light_expotential_factor:{label:"light exp factor",value:12,min:0,max:100,step:.01,onChange:e=>{w.current&&(w.current.uniforms.light_expotential_factor.value=e)}},light_mix_factor:{label:"light mix factor",value:.5,min:0,max:1,step:.01,onChange:e=>{w.current&&(w.current.uniforms.light_mix_factor.value=e)}},light_center:{label:"light center",value:{x:.5,y:.5},min:0,max:1,step:.01,onChange:e=>{w.current&&(w.current.uniforms.light_center.value=[e.x,e.y])}},depth_offset:{label:"depth offset",value:{x:1,y:1},min:0,max:100,step:1,onChange:e=>{w.current&&(w.current.uniforms.depth_offset.value=[e.x,e.y])}},light_depth:{label:"material depth",value:1,min:.01,max:100,step:.01,onChange:e=>{w.current&&(w.current.uniforms.DEPTH.value=e)}}});(0,a.useEffect)(()=>{g.current&&(g.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),d.current&&(d.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),_.current&&(_.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),b.current&&(b.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),C.current&&(C.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),y.current&&(y.current.uniforms.resolution.value=new f.Vector2(i.width,i.height)),w.current&&(w.current.uniforms.resolution.value=new f.Vector2(i.width,i.height))},[]),(0,o.A)(e=>{let{clock:n}=e,r=n.getElapsedTime();p.current&&(p.current.uniforms.buff_tex.value=t,p.current.uniforms.contact_tex.value=l,p.current.uniforms.time.value=r,c.setRenderTarget(F),c.render(P,x),c.setRenderTarget(null)),g.current&&(g.current.uniforms.buff_tex.value=F.texture,g.current.uniforms.time.value=r,c.setRenderTarget(T),c.render(U,x),c.setRenderTarget(null)),d.current&&(d.current.uniforms.buff_tex.value=T.texture,d.current.uniforms.time.value=r,c.setRenderTarget(R),c.render(L,x),c.setRenderTarget(null)),_.current&&(_.current.uniforms.buff_tex.value=R.texture,_.current.uniforms.time.value=r,c.setRenderTarget(j),c.render(z,x),c.setRenderTarget(null)),b.current&&(b.current.uniforms.buff_tex.value=j.texture,b.current.uniforms.time.value=r,c.setRenderTarget(S),c.render(M,x),c.setRenderTarget(null)),C.current&&(C.current.uniforms.buff_tex.value=S.texture,C.current.uniforms.time.value=r,c.setRenderTarget(D),c.render(N,x),c.setRenderTarget(null)),w.current&&(w.current.uniforms.buff_tex.value=D.texture,w.current.uniforms.time.value=r,c.setRenderTarget(E),c.render(V,x),c.setRenderTarget(null)),y.current&&(y.current.uniforms.buff_tex.value=E.texture,y.current.uniforms.time.value=r)});let[el,ei]=(0,v.q_)(()=>({lightMixFactor:.6,config:{mass:1,friction:35,tension:200},onChange:e=>{w.current&&(w.current.uniforms.light_mix_factor.value=e.value.lightMixFactor)},immediate:n})),[eu,es]=(0,v.q_)(()=>({from:{lightCenter:[.5,0],lightMixFactor:0,topLightStrength:0},to:{lightCenter:n?[.5,.95]:[.5,0],lightMixFactor:n?.7:0,topLightStrength:n?1:0},config:{mass:1,friction:40,tension:200},onChange:e=>{w.current&&(w.current.uniforms.light_center.value=e.value.lightCenter,w.current.uniforms.top_light_strength.value=e.value.topLightStrength,e.value.lightMixFactor<.6?w.current.uniforms.top_light_strength.value=e.value.topLightStrength:ei({lightMixFactor:0}))},immediate:!n}),[n]),[ef,ec]=(0,v.q_)(()=>({from:{strench_y_factor:0},to:{strench_y_factor:n?1:0},config:{mass:1,friction:40,tension:200},onChange:e=>{p.current&&(p.current.uniforms.strench_y_factor.value=e.value.strench_y_factor)},immediate:!n}),[n]),[em,ev]=(0,v.q_)(()=>({blurOffset:5.5,config:{mass:1,friction:35,tension:200},onChange:e=>{g.current&&d.current&&_.current&&b.current&&(g.current.uniforms.blurOffset.value=e.value.blurOffset,d.current.uniforms.blurOffset.value=e.value.blurOffset,_.current.uniforms.blurOffset.value=e.value.blurOffset,b.current.uniforms.blurOffset.value=e.value.blurOffset)}})),[eh,ex]=(0,v.q_)(()=>({from:{blurOffset:0},to:{blurOffset:n?6:0},config:{mass:1,friction:40,tension:80},onChange:e=>{g.current&&d.current&&_.current&&b.current&&(e.value.blurOffset<5.5?(g.current.uniforms.blurOffset.value=e.value.blurOffset,d.current.uniforms.blurOffset.value=e.value.blurOffset,_.current.uniforms.blurOffset.value=e.value.blurOffset,b.current.uniforms.blurOffset.value=e.value.blurOffset):(ev({blurOffset:0}),e_({strench_y_factor:0})))},dealy:n?300:0,immediate:!n}),[n]),[ep,eg]=(0,v.q_)(()=>({from:{particlePulseFactor:0,wavePulseFactor:0,particle_amount:500},to:{particlePulseFactor:n?5.3:0,wavePulseFactor:n?.97:0,particle_amount:n?0:500},config:{mass:1,friction:40,tension:90},onChange:e=>{y.current&&(y.current.uniforms.pusleFactor.value=e.value.particlePulseFactor,y.current.uniforms.particle_amount.value=e.value.particle_amount),C.current&&(C.current.uniforms.waveFactor.value=e.value.wavePulseFactor)},delay:n?450:0,immediate:!n}),[n]),[ed,e_]=(0,v.q_)(()=>({strench_y_factor:1,config:{mass:1,friction:35,tension:200},onChange:e=>{p.current&&(p.current.uniforms.strench_y_factor.value=e.value.strench_y_factor)}})),[eb,eC]=(0,v.q_)(()=>({from:{scaleTransform:.3},to:{scaleTransform:n?1.04:.3},config:{mass:1,friction:35,tension:150},onChange:e=>{p.current&&(p.current.uniforms.scale_transform.value=1/e.value.scaleTransform)},delay:n?650:0,immediate:!n}),[n]),[ey,ew]=(0,v.q_)(()=>({from:{translationTransform:[0,3]},to:{translationTransform:n?[0,0]:[0,3]},config:{mass:1,friction:40,tension:250},onChange:e=>{p.current&&(p.current.uniforms.translation_transform.value=e.value.translationTransform)},delay:n?300:0,immediate:!n}),[n]);return(0,a.useEffect)(()=>{n&&(ei({lightMixFactor:.6}),ev({blurOffset:5}),e_({strench_y_factor:1}))},[n]),(0,r.jsxs)(r.Fragment,{children:[(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("textureTransformMaterial",{ref:p})})}),P),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("blurDownSampleMaterial",{ref:g})})}),U),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("blurDownSampleMaterial",{ref:d})})}),L),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("blurUpSampleMaterial",{ref:_})})}),z),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("blurUpSampleMaterial",{ref:b})})}),M),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("waveMaterial",{ref:C})})}),N),(0,o.g)((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("proceduralLightMaterial",{ref:w})})}),V),(0,r.jsx)(s.JO,{args:[2,2],children:(0,r.jsx)("particleMaterial",{ref:y})})]})},O=e=>{let[n,t]=(0,a.useState)(!1);return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(l.Xz,{onClick:()=>{t(!n)},className:e.className,style:{...e.style},children:[(0,r.jsx)("ambientLight",{}),(0,r.jsx)(w,{isTriggered:n}),(0,r.jsx)(c.j,{})]})})};function F(){return(0,r.jsxs)("main",{className:"flex w-screen h-screen overflow-hidden flex-col items-center justify-between p-4",children:[(0,r.jsx)("div",{className:"pb-8 z-10 max-w-5xl items-center justify-between font-mono text-sm lg:flex",children:(0,r.jsx)("p",{className:"text-center fixed left-0 top-0 flex justify-center border-b border-gray-300  from-zinc-200 pb-6 pt-8 dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:rounded-xl lg:border lg:p-4 ",children:(0,r.jsx)("code",{className:"font-mono font-bold",children:"Namedrop animation in R3F"})})}),(0,r.jsxs)("div",{children:[(0,r.jsx)("iframe",{src:"https://ghbtns.com/github-btn.html?user=martinrgb&repo=iOS17_Namedrop_R3F&type=star&count=true&size=large",style:{position:"absolute",left:"16px",bottom:"16px"},width:"170",height:"30",title:"GitHub"}),(0,r.jsx)(O,{className:"origin-top scale-75",style:{width:"297px",height:"634px",borderRadius:"43px",visibility:"visible",position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",transformOrigin:"center",cursor:"pointer"}}),(0,r.jsx)("img",{className:"phone-img",src:"https://raw.githubusercontent.com/MartinRGB/iOS17_Namedrop_R3F/main/public/ip14_pro.png",width:438,height:887,alt:"Picture of the author"})]})]})}}},function(e){e.O(0,[174,867,667,488,744],function(){return e(e.s=6268)}),_N_E=e.O()}]);